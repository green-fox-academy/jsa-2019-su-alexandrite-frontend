// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EditFooter /> Should render and match the snapshot when in edit mode 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 1,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "marginTop": 10,
    }
  }
>
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "borderRadius": 6,
        "paddingHorizontal": 10,
        "paddingVertical": 8,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#b40d0d",
          "fontSize": 12,
          "fontWeight": "bold",
          "textAlignVertical": "center",
        }
      }
    >
      <Text />
       0
    </Text>
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
      }
    }
  >
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 6,
          "paddingHorizontal": 10,
          "paddingVertical": 8,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#c12424",
            "fontSize": 12,
            "fontWeight": "bold",
          }
        }
      >
         Delete WatchList
      </Text>
    </View>
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 6,
          "paddingHorizontal": 10,
          "paddingVertical": 8,
        }
      }
      testID="editorButton"
    >
      <Text
        style={
          Object {
            "color": "#666",
            "fontSize": 12,
            "fontWeight": "bold",
          }
        }
      >
        Cancel
      </Text>
    </View>
  </View>
</View>
`;

exports[`<EditFooter /> Should render and match the snapshot when not in edit mode 1`] = `
<View
  style={
    Object {
      "alignSelf": "flex-end",
      "flex": 1,
      "marginTop": 10,
    }
  }
>
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "borderRadius": 6,
        "paddingHorizontal": 10,
        "paddingVertical": 8,
      }
    }
  >
    <Text />
  </View>
</View>
`;

exports[`<Watchlists /> Should render and match the snapshot 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#fff",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    ListEmptyComponent={
      <<Card />>
        <<ErrorMessage />
          message="You don't have any watchlists right now.
Start by adding one! ;)"
        />
      </<Card />>
    }
    ListHeaderComponent={[Function]}
    contentContainerStyle={
      Object {
        "padding": 15,
        "paddingBottom": 60,
      }
    }
    data={
      Array [
        Object {
          "id": 123,
          "name": "Sample",
          "stocks": Array [
            Object {
              "currPrice": 123,
              "dailyChange": 1.3,
              "ticker": "AAPL",
              "volume": "12B",
            },
            Object {
              "currPrice": 123.1,
              "dailyChange": -3.4,
              "ticker": "MSFT",
              "volume": "43M",
            },
          ],
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={
      Array [
        0,
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
      />
      <View
        onLayout={[Function]}
        style={null}
      >
        <<Watchlist />
          item={
            Object {
              "id": 123,
              "name": "Sample",
              "stocks": Array [
                Object {
                  "currPrice": 123,
                  "dailyChange": 1.3,
                  "ticker": "AAPL",
                  "volume": "12B",
                },
                Object {
                  "currPrice": 123.1,
                  "dailyChange": -3.4,
                  "ticker": "MSFT",
                  "volume": "43M",
                },
              ],
            }
          }
        />
      </View>
    </View>
  </RCTScrollView>
  <<Popup />
    confirmButtonText="Add"
    confirmDisabled={true}
    onCancel={[Function]}
    onConfirm={[Function]}
    title="Create a watchlist"
    visible={false}
  >
    <TextInput
      allowFontScaling={true}
      onChangeText={[Function]}
      placeholder="Watchlist Name"
      rejectResponderTermination={true}
      style={
        Object {
          "borderBottomColor": "#eee",
          "borderBottomWidth": 1,
          "padding": 8,
        }
      }
      underlineColorAndroid="transparent"
    />
  </<Popup />>
  <View
    accessible={true}
    focusable={true}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "right": 0,
      }
    }
  >
    <Image
      source={1}
      style={null}
    />
  </View>
</View>
`;
